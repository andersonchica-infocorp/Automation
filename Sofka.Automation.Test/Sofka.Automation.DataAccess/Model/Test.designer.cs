#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sofka.Automation.DataAccess.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Sofka.Automation.Test")]
	public partial class TestDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertResultsTestCase(ResultsTestCase instance);
    partial void UpdateResultsTestCase(ResultsTestCase instance);
    partial void DeleteResultsTestCase(ResultsTestCase instance);
    partial void InsertTestCaseValue(TestCaseValue instance);
    partial void UpdateTestCaseValue(TestCaseValue instance);
    partial void DeleteTestCaseValue(TestCaseValue instance);
    partial void InsertTestCase(TestCase instance);
    partial void UpdateTestCase(TestCase instance);
    partial void DeleteTestCase(TestCase instance);
    #endregion
		
		public TestDataContext() : 
				base(global::Sofka.Automation.DataAccess.Properties.Settings.Default.Sofka_Automation_TestConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TestDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TestDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TestDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TestDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ResultsTestCase> ResultsTestCases
		{
			get
			{
				return this.GetTable<ResultsTestCase>();
			}
		}
		
		public System.Data.Linq.Table<TestCaseValue> TestCaseValues
		{
			get
			{
				return this.GetTable<TestCaseValue>();
			}
		}
		
		public System.Data.Linq.Table<TestCase> TestCases
		{
			get
			{
				return this.GetTable<TestCase>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ResultsTestCase")]
	public partial class ResultsTestCase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdResult;
		
		private int _IdTestCase;
		
		private bool _Success;
		
		private string _Message;
		
		private EntityRef<TestCase> _TestCase;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdResultChanging(int value);
    partial void OnIdResultChanged();
    partial void OnIdTestCaseChanging(int value);
    partial void OnIdTestCaseChanged();
    partial void OnSuccessChanging(bool value);
    partial void OnSuccessChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    #endregion
		
		public ResultsTestCase()
		{
			this._TestCase = default(EntityRef<TestCase>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdResult", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdResult
		{
			get
			{
				return this._IdResult;
			}
			set
			{
				if ((this._IdResult != value))
				{
					if (this._TestCase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdResultChanging(value);
					this.SendPropertyChanging();
					this._IdResult = value;
					this.SendPropertyChanged("IdResult");
					this.OnIdResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdTestCase", DbType="Int NOT NULL")]
		public int IdTestCase
		{
			get
			{
				return this._IdTestCase;
			}
			set
			{
				if ((this._IdTestCase != value))
				{
					this.OnIdTestCaseChanging(value);
					this.SendPropertyChanging();
					this._IdTestCase = value;
					this.SendPropertyChanged("IdTestCase");
					this.OnIdTestCaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Success", DbType="Bit NOT NULL")]
		public bool Success
		{
			get
			{
				return this._Success;
			}
			set
			{
				if ((this._Success != value))
				{
					this.OnSuccessChanging(value);
					this.SendPropertyChanging();
					this._Success = value;
					this.SendPropertyChanged("Success");
					this.OnSuccessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestCase_ResultsTestCase", Storage="_TestCase", ThisKey="IdResult", OtherKey="IdTestCase", IsForeignKey=true)]
		public TestCase TestCase
		{
			get
			{
				return this._TestCase.Entity;
			}
			set
			{
				TestCase previousValue = this._TestCase.Entity;
				if (((previousValue != value) 
							|| (this._TestCase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestCase.Entity = null;
						previousValue.ResultsTestCase = null;
					}
					this._TestCase.Entity = value;
					if ((value != null))
					{
						value.ResultsTestCase = this;
						this._IdResult = value.IdTestCase;
					}
					else
					{
						this._IdResult = default(int);
					}
					this.SendPropertyChanged("TestCase");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestCaseValues")]
	public partial class TestCaseValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdTestCaseValue;
		
		private int _IdTestCase;
		
		private string _Property;
		
		private string _Value;
		
		private EntityRef<TestCase> _TestCase;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdTestCaseValueChanging(int value);
    partial void OnIdTestCaseValueChanged();
    partial void OnIdTestCaseChanging(int value);
    partial void OnIdTestCaseChanged();
    partial void OnPropertyChanging(string value);
    partial void OnPropertyChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public TestCaseValue()
		{
			this._TestCase = default(EntityRef<TestCase>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdTestCaseValue", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdTestCaseValue
		{
			get
			{
				return this._IdTestCaseValue;
			}
			set
			{
				if ((this._IdTestCaseValue != value))
				{
					if (this._TestCase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTestCaseValueChanging(value);
					this.SendPropertyChanging();
					this._IdTestCaseValue = value;
					this.SendPropertyChanged("IdTestCaseValue");
					this.OnIdTestCaseValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdTestCase", DbType="Int NOT NULL")]
		public int IdTestCase
		{
			get
			{
				return this._IdTestCase;
			}
			set
			{
				if ((this._IdTestCase != value))
				{
					this.OnIdTestCaseChanging(value);
					this.SendPropertyChanging();
					this._IdTestCase = value;
					this.SendPropertyChanged("IdTestCase");
					this.OnIdTestCaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Property", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Property
		{
			get
			{
				return this._Property;
			}
			set
			{
				if ((this._Property != value))
				{
					this.OnPropertyChanging(value);
					this.SendPropertyChanging();
					this._Property = value;
					this.SendPropertyChanged("Property");
					this.OnPropertyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestCase_TestCaseValue", Storage="_TestCase", ThisKey="IdTestCaseValue", OtherKey="IdTestCase", IsForeignKey=true)]
		public TestCase TestCase
		{
			get
			{
				return this._TestCase.Entity;
			}
			set
			{
				TestCase previousValue = this._TestCase.Entity;
				if (((previousValue != value) 
							|| (this._TestCase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestCase.Entity = null;
						previousValue.TestCaseValue = null;
					}
					this._TestCase.Entity = value;
					if ((value != null))
					{
						value.TestCaseValue = this;
						this._IdTestCaseValue = value.IdTestCase;
					}
					else
					{
						this._IdTestCaseValue = default(int);
					}
					this.SendPropertyChanged("TestCase");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestCases")]
	public partial class TestCase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdTestCase;
		
		private string _Input;
		
		private string _Description;
		
		private EntityRef<ResultsTestCase> _ResultsTestCase;
		
		private EntityRef<TestCaseValue> _TestCaseValue;
		
		private EntityRef<TestCase> _TestCase2;
		
		private EntityRef<TestCase> _TestCase1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdTestCaseChanging(int value);
    partial void OnIdTestCaseChanged();
    partial void OnInputChanging(string value);
    partial void OnInputChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public TestCase()
		{
			this._ResultsTestCase = default(EntityRef<ResultsTestCase>);
			this._TestCaseValue = default(EntityRef<TestCaseValue>);
			this._TestCase2 = default(EntityRef<TestCase>);
			this._TestCase1 = default(EntityRef<TestCase>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdTestCase", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdTestCase
		{
			get
			{
				return this._IdTestCase;
			}
			set
			{
				if ((this._IdTestCase != value))
				{
					if (this._TestCase1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTestCaseChanging(value);
					this.SendPropertyChanging();
					this._IdTestCase = value;
					this.SendPropertyChanged("IdTestCase");
					this.OnIdTestCaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Input", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Input
		{
			get
			{
				return this._Input;
			}
			set
			{
				if ((this._Input != value))
				{
					this.OnInputChanging(value);
					this.SendPropertyChanging();
					this._Input = value;
					this.SendPropertyChanged("Input");
					this.OnInputChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(300) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestCase_ResultsTestCase", Storage="_ResultsTestCase", ThisKey="IdTestCase", OtherKey="IdResult", IsUnique=true, IsForeignKey=false)]
		public ResultsTestCase ResultsTestCase
		{
			get
			{
				return this._ResultsTestCase.Entity;
			}
			set
			{
				ResultsTestCase previousValue = this._ResultsTestCase.Entity;
				if (((previousValue != value) 
							|| (this._ResultsTestCase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResultsTestCase.Entity = null;
						previousValue.TestCase = null;
					}
					this._ResultsTestCase.Entity = value;
					if ((value != null))
					{
						value.TestCase = this;
					}
					this.SendPropertyChanged("ResultsTestCase");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestCase_TestCaseValue", Storage="_TestCaseValue", ThisKey="IdTestCase", OtherKey="IdTestCaseValue", IsUnique=true, IsForeignKey=false)]
		public TestCaseValue TestCaseValue
		{
			get
			{
				return this._TestCaseValue.Entity;
			}
			set
			{
				TestCaseValue previousValue = this._TestCaseValue.Entity;
				if (((previousValue != value) 
							|| (this._TestCaseValue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestCaseValue.Entity = null;
						previousValue.TestCase = null;
					}
					this._TestCaseValue.Entity = value;
					if ((value != null))
					{
						value.TestCase = this;
					}
					this.SendPropertyChanged("TestCaseValue");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestCase_TestCase", Storage="_TestCase2", ThisKey="IdTestCase", OtherKey="IdTestCase", IsUnique=true, IsForeignKey=false)]
		public TestCase TestCase2
		{
			get
			{
				return this._TestCase2.Entity;
			}
			set
			{
				TestCase previousValue = this._TestCase2.Entity;
				if (((previousValue != value) 
							|| (this._TestCase2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestCase2.Entity = null;
						previousValue.TestCase1 = null;
					}
					this._TestCase2.Entity = value;
					if ((value != null))
					{
						value.TestCase1 = this;
					}
					this.SendPropertyChanged("TestCase2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestCase_TestCase", Storage="_TestCase1", ThisKey="IdTestCase", OtherKey="IdTestCase", IsForeignKey=true)]
		public TestCase TestCase1
		{
			get
			{
				return this._TestCase1.Entity;
			}
			set
			{
				TestCase previousValue = this._TestCase1.Entity;
				if (((previousValue != value) 
							|| (this._TestCase1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestCase1.Entity = null;
						previousValue.TestCase2 = null;
					}
					this._TestCase1.Entity = value;
					if ((value != null))
					{
						value.TestCase2 = this;
						this._IdTestCase = value.IdTestCase;
					}
					else
					{
						this._IdTestCase = default(int);
					}
					this.SendPropertyChanged("TestCase1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
